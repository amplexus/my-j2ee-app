package org.amplexus.demo.bean;

import static org.junit.Assert.assertEquals;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import javax.persistence.EntityManager;

import org.amplexus.demo.model.Order;
import org.junit.Before;
import org.junit.Test;

/**
 * Test suite for the OrderBeanImpl class.
 */
public class OrderBeanImplTest {

    OrderBeanImpl orderBeanImpl = new OrderBeanImpl(); // The EJB we are testing
    EntityManager mockedEntityManager; // The EntityManager we will inject into
                                       // the EJB

    @Before
    public void init() {
        mockedEntityManager = mock(EntityManager.class); // Mock the
                                                         // EntityManager
        orderBeanImpl.em = mockedEntityManager; // Inject the mocked
                                                // EntityManager into the EJB
    }

    @Test
    public void testCreateOrderSuccess() {
        Order mockedOrder = mock(Order.class);
        when(mockedOrder.getId()).thenReturn(123);

        int orderId = orderBeanImpl.createOrder(mockedOrder);

        // Ensure the createOrder method returns the orderId generated by JPA in
        // its response
        assertEquals(orderId, 123);

        // Ensure the createOrder method invokes'em.persist(), and that it
        // passes the order
        verify(mockedEntityManager, times(1)).persist(mockedOrder);

        // Ensure the createOrder service never modifies the order
        verifyOrderNotModified(mockedOrder);
    }

    @Test
    public void testCancelOrderSuccess() {

        int orderId = 234;

        Order mockedOrder = mock(Order.class);
        when(mockedOrder.getId()).thenReturn(orderId);

        when(mockedEntityManager.find(Order.class, orderId)).thenReturn(
                mockedOrder);

        orderBeanImpl.cancelOrder(orderId);

        // Ensure the cancelOrder method invokes em.find() and that it passes
        // the orderId
        verify(mockedEntityManager, times(1)).find(Order.class, orderId);

        // Ensure the cancelOrder method invokes em.remove() and that it passes
        // the order
        verify(mockedEntityManager, times(1)).remove(mockedOrder);

        // Ensure the cancelOrder service never modifies the order
        verifyOrderNotModified(mockedOrder);
    }

    @Test
    public void testRetrieveOrderSuccess() {

        int orderId = 234;

        Order mockedOrder = mock(Order.class);

        when(mockedEntityManager.find(Order.class, orderId)).thenReturn(
                mockedOrder);

        orderBeanImpl.retrieveOrder(orderId);

        // Ensure the retrieveOrder method invokes em.find(), and that it passes
        // the orderId
        verify(mockedEntityManager, times(1)).find(Order.class, orderId);

        // Ensure the retrieveOrder service never modifies the order
        verifyOrderNotModified(mockedOrder);
    }

    @Test
    public void testUpdateOrderSuccess() {

        int orderId = 345;

        Order mockedOrder = mock(Order.class);
        when(mockedOrder.getId()).thenReturn(orderId);

        Order mockedFoundOrder = mock(Order.class);
        when(mockedEntityManager.find(Order.class, orderId)).thenReturn(
                mockedFoundOrder);

        orderBeanImpl.updateOrder(mockedOrder);

        // Ensure the updateOrder method invokes em.find(), and that it passes
        // the orderId
        verify(mockedEntityManager, times(1)).find(Order.class, orderId);

        verify(mockedEntityManager, never()).persist(mockedFoundOrder);

        // Ensure the updateOrder service does not modify the order in the
        // request
        verifyOrderNotModified(mockedOrder);

        // Ensure the updateOrder service does modify the found order
        verifyOrderWasModified(mockedFoundOrder);
    }

    private void verifyOrderWasModified(Order mockedOrder) {
        // The order id is the primary key, so it should NEVER be modified.
        verify(mockedOrder, never()).setId(anyInt());
        verify(mockedOrder, times(1)).setName(anyString());
        verify(mockedOrder, times(1)).setAddress(anyString());
        verify(mockedOrder, times(1)).setPhoneNumber(anyString());
        verify(mockedOrder, times(1)).setEmail(anyString());
    }

    private void verifyOrderNotModified(Order mockedOrder) {
        verify(mockedOrder, never()).setId(anyInt());
        verify(mockedOrder, never()).setName(anyString());
        verify(mockedOrder, never()).setAddress(anyString());
        verify(mockedOrder, never()).setPhoneNumber(anyString());
        verify(mockedOrder, never()).setEmail(anyString());
    }
}
